<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>It&#39;s a Dev&#39;s world</title>
    <link>https://jackleila.github.io/programming/public/</link>
    <description>Recent content on It&#39;s a Dev&#39;s world</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Jun 2025 20:35:35 +0200</lastBuildDate>
    <atom:link href="https://jackleila.github.io/programming/public/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Malware Detection: YARA</title>
      <link>https://jackleila.github.io/programming/public/post/malware-detection-yara-rules/</link>
      <pubDate>Sat, 14 Jun 2025 20:35:35 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/malware-detection-yara-rules/</guid>
      <description>Introduction to YARA YARA is a tool used to identify and classify malware based on textual or binary patterns. In this tutorial, we&amp;rsquo;ll cover the basics of YARA and how to write simple rules to detect patterns in files.&#xA;What Is YARA? YARA (Yet Another Recursive Acronym) is a rule-based pattern matching engine developed by VirusTotal, widely used for:&#xA;Detecting malware families Scanning files for custom signatures Automating threat detection in incident response Installation Linux: sudo apt update sudo apt install yara macOS: brew install yara Windows: Download it from here.</description>
    </item>
    <item>
      <title>Android pentesting: Introduction to Frida</title>
      <link>https://jackleila.github.io/programming/public/post/configuration-frida-android/</link>
      <pubDate>Thu, 12 Jun 2025 17:09:47 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/configuration-frida-android/</guid>
      <description>Getting started with Frida In this post, I will briefly talk about how to configure Frida. For this tutorial I used an Android emulator with root permissions, but Frida can also be used for other platforms.&#xA;Installation First step is to have ADB installed. If you have Android studio, you will probably have it already installed. I summarized some basic commands on the post about Android forensics.&#xA;To install Frida, we can use Python packet manager pip:</description>
    </item>
    <item>
      <title>Android Forensics Tools</title>
      <link>https://jackleila.github.io/programming/public/post/android-forensics-tools/</link>
      <pubDate>Sat, 24 May 2025 13:23:21 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/android-forensics-tools/</guid>
      <description>Android Forensics Tools My personal compilation of tools for Android Forensics and Analysis. I will be extending this list.&#xA;ADB Useful to interact with Android devices via the command line.&#xA;ðŸ”— Download ADB&#xA;Commands:&#xA;adb devices # List connected devices adb shell # Start shell on device adb install .\app-debug.apk&#x9;# Install app adb pull /sdcard/data.txt # Copy file from device adb push&#x9;# Ex (adb push .\frida-server-16.7.14-android-x86_64 /data/local/tmp/) adb logcat # View device logs LiME (Linux Memory Extractor) Dumping volatile memory from Android devices.</description>
    </item>
    <item>
      <title>USB Detection in Windows</title>
      <link>https://jackleila.github.io/programming/public/post/windows-usb-detection/</link>
      <pubDate>Tue, 09 Jan 2024 00:02:24 +0100</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/windows-usb-detection/</guid>
      <description>Windows Event Logs Security Event Logs 6416 â€“ A new external device was recognized by the system. 4663 â€“ An attempt was made to access an object (useful to monitor file access on USB drives). 4656 â€“ A handle to an object was requested. 4624 / 4634 â€“ Logon/logoff events to correlate user activity with USB usage. System Event Logs From the Microsoft-Windows-DriverFrameworks-UserMode/Operational log:&#xA;20001 â€“ A USB device was connected.</description>
    </item>
    <item>
      <title>Introduction to OT Protocols</title>
      <link>https://jackleila.github.io/programming/public/post/ot_protocols/</link>
      <pubDate>Sat, 24 Sep 2022 08:43:01 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/ot_protocols/</guid>
      <description>Introduction to some OT protocols Modbus Modbus RTU Modbus RTU is a serial communication protocol that allows data exchange between PLCs and PCs.&#xA;Modbus TCP To find devices using Modbus, we can use the following nmap script:&#xA;nmap --script modbus-discover.nse -p 502 &amp;lt;host&amp;gt;&#xA;Modbus TCP Modbus TCP is a variant of Modbus RTU over TCP/IP.&#xA;Common Port: 502/TCP&#xA;To find devices using Modbus TCP, we can use the following Nmap script:</description>
    </item>
    <item>
      <title>Reversing With Ghidra I</title>
      <link>https://jackleila.github.io/programming/public/post/reversing-with-ghidra-i/</link>
      <pubDate>Thu, 28 Oct 2021 12:04:53 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/reversing-with-ghidra-i/</guid>
      <description>In this post we will take a brief look at Ghidra, a tool developed by the NSA for the reversing. Ghidra is a powerful program with a lot of options, and we will be exploring them in different tutorials by resolving different reversing challenges. In this tutorial we will look at the installation, project creation and overview by resolving a simple crackme.&#xA;Installation To run Ghidra, you need to install JDK 11 64-bit.</description>
    </item>
    <item>
      <title>Getting Started With Gtest</title>
      <link>https://jackleila.github.io/programming/public/post/get-started-with-gtest/</link>
      <pubDate>Wed, 27 Oct 2021 09:46:58 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/get-started-with-gtest/</guid>
      <description>In this post we will have a brief introduction to the Google test library that will allow us to tests our C/C++ programs.&#xA;Installing and compiling the Gtest library First, we need to install the library: sudo apt-get install libgtest-dev&#xA;We compile using cmake: cd /usr/src/gtest&#xA;sudo cmake CMakeLists.txt&#xA;sudo make&#xA;We copy libgtest.a and libgtest_main.a to /usr/lib: sudo cp *.a /usr/lib&#xA;Getting started We will start with a very simple function:</description>
    </item>
    <item>
      <title>About</title>
      <link>https://jackleila.github.io/programming/public/about/</link>
      <pubDate>Sat, 25 Sep 2021 17:11:08 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/about/</guid>
      <description>This blog is mainly about programming and cybersecurity.</description>
    </item>
    <item>
      <title>Useful docker commands to always have nearby</title>
      <link>https://jackleila.github.io/programming/public/post/third-post/</link>
      <pubDate>Wed, 22 Sep 2021 21:37:34 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/third-post/</guid>
      <description>Just a list of docker commands I use pretty often.&#xA;General commands Show running containers:&#xA;docker ps&#xD;Show all containers:&#xA;docker ps -a&#xD;Information about a docker:&#xA;docker inspect CONT&#xD;Open bash in docker:&#xA;docker exec -it /bin/bash CONT&#xD;Delete container:&#xA;docker rm CONT&#xD;List images:&#xA;docker images&#xD;Remove image:&#xA;docker image rm IMG&#xD;Build image:&#xA;docker build --target production-stage -t NAME_IMG DOCKERFILE_DIR&#xD;Run image&#xA;docker run -p 8080 --name CONT_NAME IMG_NAME&#xD;Docker compose docker-compose up&#xD;docker-compose down&#xD;Option -d so it won&amp;rsquo;t show logs on screen</description>
    </item>
    <item>
      <title>Nmap: basic guide for pentesting</title>
      <link>https://jackleila.github.io/programming/public/post/second-post/</link>
      <pubDate>Tue, 21 Sep 2021 20:40:40 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/second-post/</guid>
      <description>Nmap is a well-known tool for pentesters and hackers. It basically allows us to scan the ports of a network, but it is much more powerful than that, as we will see in this post. We will start by reviewing some basic commands of nmap.&#xA;Scanning ports We can use the following command to perform an scan of the specified port of the address given. This will show us which ports are open, closed, or protected by some firewall.</description>
    </item>
    <item>
      <title>How to easily create a blog using Hugo</title>
      <link>https://jackleila.github.io/programming/public/post/first-post/</link>
      <pubDate>Sun, 19 Sep 2021 19:02:57 +0200</pubDate>
      <guid>https://jackleila.github.io/programming/public/post/first-post/</guid>
      <description>What is Hugo? Hugo is an open-source framework to simplify the process of creating static websites. There are a lot of different templates we can use online, which are usually very simple but beautiful. Some of them are even pretty original such as this one inspired in Mr. Robot.&#xA;Now that we had a brief introduction of what Hugo is, let us make the theory into practice.&#xA;Installation Windows We can install Hugo on Windows with Chocolatey:</description>
    </item>
  </channel>
</rss>
